[{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fatelarico.github.io/FinNet.html/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fatelarico.github.io/FinNet.html/articles/workflow-igraph_financial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example workflow (`igraph` edition)","text":"years now, authors analysts worked financial data using ad-hoc tools programming languages R. , package FinNet born provide R users ability study financial networks set tool especially designed purpose. Specifically, FinNet offers brand new tools interface almost limitless capabilities igraph network. vignette illustrates : Retrieve desired data using yahoofinancer; Create firm-firm (FF) matrix; Create corresponding graph; Plot smart, nice-looking defaults.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/articles/workflow-igraph_financial.html","id":"data-retrieval","dir":"Articles","previous_headings":"","what":"1. Data retrieval","title":"Example workflow (`igraph` edition)","text":"identified firms interest, package can fetch information long yahoofinancer available. :","code":"# Check if `yahoofinancer` is installed isTRUE(requireNamespace('yahoofinancer', quietly = TRUE)) #> [1] TRUE  # Create a list of the desired firms # Note: if `SPB` is installed, a progress bar will appear firms <- find.firms(tickers = c('TM', 'GM', 'F', 'HMC'),                     name = c('Toyota', 'General Motors',                              'Ford', 'Honda')) #>  #> Progress status: 1/4 #>  [==================------------------------------------------------------]  25% #>  #> Progress status: 2/4 #>  [====================================------------------------------------]  50% #>  #> Progress status: 3/4 #>  [======================================================------------------]  75% #>  #> Progress status: 4/4 #>  [=========================================================================]  100%"},{"path":"https://fatelarico.github.io/FinNet.html/articles/workflow-igraph_financial.html","id":"matrix-construction","dir":"Articles","previous_headings":"","what":"2. Matrix construction","title":"Example workflow (`igraph` edition)","text":"many function FF function family rapidly build adjacency matrix. step, FF.norm.ownership() construct normalised-valued matrix common ownership","code":"# Identify common-ownership relations in a firm-firm matrix FF <- FF.norm.ownership(firms)"},{"path":"https://fatelarico.github.io/FinNet.html/articles/workflow-igraph_financial.html","id":"graphing","dir":"Articles","previous_headings":"","what":"3. Graphing","title":"Example workflow (`igraph` edition)","text":"graph can obtained easily using FF.graph(), include two preset aesthetics: ‘simple’ ‘nice’ checks using S3 methods implemented financial_matrix objects extension igraph functions allow verify correctness graph:","code":"# Create a simple-looking graph g <- FF.graph(FF, aesthetic = 'simple') # The order of the graph equals the number of rows in the FF matrix vcount(g) == nrow(FF) #> [1] TRUE  # The names of its vertex match the row names of the FF matrix V(g)$name == rownames(FF) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://fatelarico.github.io/FinNet.html/articles/workflow-igraph_financial.html","id":"plotting-using-default-nice-aesthetics","dir":"Articles","previous_headings":"","what":"4. Plotting using default nice aesthetics","title":"Example workflow (`igraph` edition)","text":"‘nice’ defaults indicated visual inspection network.","code":"# Load dataset data('firms_BKB')  # Identify common-ownership relations in a firm-firm matrix FF <- FF(firms_BKB, who = 'own',                  ties = 'naive', Matrix = TRUE)  # Create a nice-looking graph g <- FF.graph(FF, aesthetic = 'nice')  # Plot it plot_igraph(g, vertex.label = NA, edge.arrow.size = .6, scale_vertex = 10)"},{"path":"https://fatelarico.github.io/FinNet.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabio Ashtar Telarico. Author, maintainer.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Telarico F (2023). FinNet: Quickly Build Manipulate Financial Networks. R package version 0.1.0, https://fatelarico.github.io/FinNet.html.","code":"@Manual{,   title = {FinNet: Quickly Build and Manipulate Financial Networks},   author = {Fabio Ashtar Telarico},   year = {2023},   note = {R package version 0.1.0},   url = {https://fatelarico.github.io/FinNet.html}, }"},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"finnet-financial-network-analysis-in-r-got-straight-","dir":"","previous_headings":"","what":"Quickly Build and Manipulate Financial Networks","title":"Quickly Build and Manipulate Financial Networks","text":"Author: Fabio Ashtar Telarico, University Ljubljana, FDV","code":""},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Quickly Build and Manipulate Financial Networks","text":"numerous packages helping users deal network data R (notably network igraph) offer tools specific financial networks. years now, authors analysts worked financial data using ad-hoc tools programming languages R. , package FinNet born provide R users ability study financial networks set tool especially designed purpose. Specifically, FinNet offers brand new tools interface almost limitless capabilities igraph network. Supply chains financial network (: McVey, Henry H., ‘State Play’, KKR, Mar 24, 2022, https://www.kkr.com/node/4025). first release FinNet introduces backbone system, expanded new releases. basic introduction available readme. information, visit: FinNet’s webiste","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"from-cran-stable-version","dir":"","previous_headings":"","what":"From CRAN (stable version)","title":"Quickly Build and Manipulate Financial Networks","text":"","code":"install.packages('FinNet')"},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"from-github-development-version","dir":"","previous_headings":"","what":"From GitHub (development version)","title":"Quickly Build and Manipulate Financial Networks","text":"","code":"if(!require('remotes'))install.packages('remotes') remotes::install_github('faTelarico/FinNet')"},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Quickly Build and Manipulate Financial Networks","text":"FinNet R package especially conceived financial-network analysis CRAN. True, similar results achieved combining functions several packages. However, FinNet allows users (mainly analysts researchers) focus matters, analyses, let package take care tedious operations conversion. nutshell, FinNet designed put ease use first.1 Moreover, allows lean installation since required packages included base R: grDevices methods. Yet, extremely flexible insofar allows users leverage capabilities packages available CRAN: igraph network interface FinNet packages; knitr pander print better summaries console; Matrix optimise storage relations agents; SPB get better progress bars; yahoofinancer automatically retrieve data Yahoo! Finance","code":""},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Quickly Build and Manipulate Financial Networks","text":"stage development, FinNet provides following: Specialised S4 classes financial agents (firm), relations (financial_matrix), interfaces packages (network_financial igraph_financial); Functions register information financial agents, including retrieving Yahoo! Finance; Function encode relations agents owners managers incidence matrices; Function encode relations agents (based common ownership, board interlocks, ) adjacency matrices; Function encode relations agents (based common ownership, board interlocks, ) extended network igraph objects.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"from-retrieving-the-data-to-an-igraphsna-object","dir":"","previous_headings":"","what":"From retrieving the data to an igraph/sna object","title":"Quickly Build and Manipulate Financial Networks","text":"simple workflow using version FinNet includes: identified firms interest, package can fetch information long yahoofinancer available. : check using S3 methods implemented financial_matrix objects extension igraph functions allow verify correctness graph:","code":"# Check if `yahoofinancer` is installed isTRUE(requireNamespace('yahoofinancer', quietly = TRUE)) ## [1] TRUE # Create a list of the desired firms # Note: if `SPB` is installed, a progress bar will appear firms <- find.firms(tickers = c('TM', 'GM', 'F', 'HMC'),                     name = c('Toyota', 'General Motors',                              'Ford', 'Honda')) ##  ## Progress status: 1/4 ##  [==================------------------------------------------------------]  25% ##  ## Progress status: 2/4 ##  [====================================------------------------------------]  50% ##  ## Progress status: 3/4 ##  [======================================================------------------]  75% ##  ## Progress status: 4/4 ##  [=========================================================================]  100% # Identify common-ownership relations in a firm-firm matrix FF <- FF.norm.ownership(firms)  # Create a simple-looking graph g <- FF.graph(FF, aesthetic = 'simple') # The order of the graph equals the number of rows in the FF matrix vcount(g) == nrow(FF) ## [1] TRUE # The names of its vertex match the row names of the FF matrix V(g)$name == rownames(FF) ## [1] TRUE TRUE TRUE TRUE"},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"plotting-using-default-nice-aesthetics","dir":"","previous_headings":"","what":"Plotting using default nice aesthetics","title":"Quickly Build and Manipulate Financial Networks","text":"also useful defaults visual inspection network. Plot drawn using default ‘nice’ aesthetics","code":"# Load dataset data('firms_BKB')  # Identify common-ownership relations in a firm-firm matrix FF <- FF(firms_BKB, who = 'own',                  ties = 'naive', Matrix = TRUE)  # Create a nice-looking graph g <- FF.graph(FF, aesthetic = 'nice')  # Plot it plot_igraph(g, vertex.label = NA, edge.arrow.size = .6, scale_vertex = 10)"},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"comparison-with-potentially-similar-r-packages","dir":"","previous_headings":"","what":"Comparison with potentially similar R packages","title":"Quickly Build and Manipulate Financial Networks","text":"simple look list packages available CRAN shows packages financial-network analysis. --date book subject, Introduction R Quantitative Finance (Daróczi et al. 2023, 125-138) uses igraph analyse network, offers indications regards data managing network construction.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"Quickly Build and Manipulate Financial Networks","text":"upcoming features package : Functions estimate influence influence-maximisation algorhitms (see Mizruchi Bunting [1981] (https://doi.org/10.2307/2392519); Khalife, Read Vazirgiannis 2021); Functions identify systematically important agents network (see Komárková, Hausenblas, Frait 2012; Lai Hu 2021); Different measures centrality (see R package centiserve; Nakamoto, Chakraborty Ikeda 2019); Functions estimate systemic risk financial contagion (see Kali Reyes 2013; Summer 2013); Improve support network/sna; Introduce graphical interface execute operation.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic methods for objects of class financial_matrix — FF-basic-methods","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"Basic methods objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"","code":"# S4 method for financial_matrix rownames(x, do.NULL = TRUE, prefix = \"row\")  # S4 method for financial_matrix colnames(x, do.NULL = TRUE, prefix = \"row\")"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"x financial_matrix object operate .NULL Whether use NULL names. Defaults FALSE prefix Prefix created names (.NULL FALSE names NULL)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"character vector length equal number rows (columns) financial_matrix corresponding names rows (columns)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"Mind usually rows columns named firm's tickers.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-basic-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Basic methods for objects of class financial_matrix — FF-basic-methods","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-comparison-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","title":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","text":"Basic method check compare values financial_matrix object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-comparison-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","text":"","code":"# S4 method for financial_matrix,logical duplicated(x, incomparables = FALSE, ...)  # S4 method for financial_matrix,logical unique(x, incomparables = FALSE, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-comparison-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","text":"x financial_matrix object operate incomparables Either: vector values compared FALSE, case values can compared ... Arguments passed relevant matrix method","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-comparison-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","text":"duplicated: logical array dimensions dimnames financial_matrix's matrix component. unique: matrix component coerced vector returned, one copy duplicated element.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-comparison-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Basic method to check to compare values in a financial_matrix object — FF-comparison-methods","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical methods for financial_matrix objects — FF-math-methods","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"isSymmetric checks matrix-like part summary operates numeric attributes matrix-like part","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"","code":"# S4 method for financial_matrix isSymmetric(object, ...)  # S4 method for financial_matrix summary(object, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"object financial_matrix object operate ... Arguments passed relevant matrix method","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"isSymmetric: boolean, TRUE matrix symmetric, FALSE otherwise; summary: list length equal number numeric attributes possed financial_matrix (maximum three, matrix , revenues, capitalisation) assumed measured scale denominated currency). element list class c('summaryDefault', 'table') specialized format print methods","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"Mathematical methods financial_matrix objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-math-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mathematical methods for financial_matrix objects — FF-math-methods","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"Unlike methods (.e., duplicated, isSymmetric, summary, rownames, colnames), methods act matrix-like components financial_matrix object.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"","code":"# S4 method for financial_matrix ncol(x)  # S4 method for financial_matrix nrow(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"x financial_matrix object operate ","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"single numeric, number rows (columns) matrix. also prints message console object's attributes (e.g., capitalisation) conformed matrix's dimensions","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"Checks length names matches attributes NA structurally unitary length (.e., slots M relation).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-nrow-ncol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of rows/columns in a financial_matrix object — FF-nrow-ncol","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-subset-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to subset a financial_matrix — FF-subset-method","title":"Method to subset a financial_matrix — FF-subset-method","text":"Subsets components financial_matrix object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-subset-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to subset a financial_matrix — FF-subset-method","text":"","code":"# S4 method for financial_matrix subset(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-subset-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to subset a financial_matrix — FF-subset-method","text":"x financial_matrix object operate ... Arguments passed relevant matrix method","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-subset-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to subset a financial_matrix — FF-subset-method","text":"financial_matrix object, subsetted desired firms","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF-subset-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method to subset a financial_matrix — FF-subset-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"Function create binary firm-firm (FF) matrix based common ownership board interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"","code":"FF.binary.both(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE,   combining = \"sum\" )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE. combining combine FF matrix managers owners. Possible values: sum; mean average; min; max;","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"ties' value : \\(1\\) least one common manager owner, \\(0\\) otherwise.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.both.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete binary firm-firm (FF) matrix — FF.binary.both","text":"","code":"# Create the complete binary firm-firm matrix for the companies held by Berkshire Hathaway data('firms_BKB') FF <- FF.binary.both(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"Function create binary firm-firm (FF) matrix based board interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"","code":"FF.binary.management(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.management.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a binary firm-firm (FF) matrix for board interlocks — FF.binary.management","text":"","code":"# Create the binary FF matrix of Berkshire Hathaway's holdings by boards interlock data('firms_BKB') FF <- FF.binary.management(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"Function create binary firm-firm (FF) matrix based common ownership","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"","code":"FF.binary.ownership(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.binary.ownership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a binary firm-firm (FF) matrix for common ownership — FF.binary.ownership","text":"","code":"# Create the binary FF matrix of Berkshire Hathaway's holdings by common ownership data('firms_BKB') FF <- FF.binary.ownership(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"Create object class graph package igraph using FF matrix class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"","code":"FF.graph.custom(   x,   vertex.size = NULL,   vertex.colour = NULL,   edge.width = NULL,   edge.greyscale = NULL,   directed = TRUE,   loops = FALSE,   weighted = any(x@M %in% c(0, 1)),   ... )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"x matrix-like object produced FF related functions vertex.size piece information firms used represent nodes' size (see Details). vertex.colour piece  information firms used represent nodes' colours (see Details). edge.width Whether use edges' width represent tie strength. Defaults FALSE. edge.greyscale Whether use edges' colour represent tie strength grey scale. Defaults TRUE matrix valued. directed Whether network directed. Defaults TRUE loops Whether network loops. Defaults FALSE weighted Whether ties/edges weighted. Defaults TRUE element matrix equals neither 0 1 ... Aliases parameters additional settings (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"network desired format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"function allows number additional arguments.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"what-can-be-passed-to-vertex-colour-and-vertex-size","dir":"Reference","previous_headings":"","what":"What can be passed to vertex.colour and vertex.size","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"pieces information possible pass vertex.size vertex.colour : capitalisation, arranged steps (see capitalisation.bins ) revenue, arranged steps (see revenues.bins ) legal_form sector currency","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"what-can-be-passed-to-edge-width-and-edge-greyscale","dir":"Reference","previous_headings":"","what":"What can be passed to edge.width and edge.greyscale","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"pieces information possible pass edge.width edge.greyscale : capitalisation revenue","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"additional-parameters-related-to-vertex-size","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.size","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"effect additional parameters modify behaviour vertex.size : vertex.size.max (defaults 5) : vertex.size one aliases specified, size biggest vertex; neither vertex.size aliases given, size vertices. vertex.size.min (defaults 1): vertex.size one aliases specified, size smallest vertex; neither vertex.size aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"additional-parameters-related-to-vertex-colour","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.colour","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"additional parameter related vertex.colour vertex.colour.palette. supports vector RGB named colours (see colours named colours R). also accepts complete calls functions return vector like RColorBrewer::brewer.pal(n, name) viridisLite::viridis(n, option). palette short, extended automatically using colorRampPalette. palette declared, arguemnt TRUE, defaulr following vector colours: #00204D, Oxford Blue #31446B, Police Blue #666970, Dim Grey #958F78, Artichoke #CBBA69, Dark Khaki #FFEA46, Gargoyle Gas argument FALSE, NULL NA, vertex coloured #081677 (Gentian blue).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"additional-parameters-related-to-edge-width","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.width","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"edge.width.max (defaults 5) : edge.width one aliases specified, thickness thickest edge; neither edge.width aliases given, thickness edges edge.width.min (defaults 1): edge.width one aliases specified, thickness slimmest edge; neither edge.width aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"additional-parameters-related-to-edge-greyscale","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.greyscale","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"edge.greyscale.darkest (defaults 5) : edge.greyscale one aliases specified, thickness thickest edge; neither edge.greyscale aliases given, thickness edges edge.greyscale.fairest (defaults 1): edge.greyscale one aliases specified, thickness slimmest edge; neither edge.greyscale aliases given, ignored. Several aliases accepted arguments, except M: vertex.size: node.size vertex.colour: vertex.color, node.colour, node.color; edge.width: tie.width edge.greyscale: tie.grayscale, tie.greyscale, edge.grayscale","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent a firm-firm (FF) network using the package igraph — FF.graph.custom","text":"","code":"# Create the graph representation of the binary FF of # Berkshire Hataway's holdings based on common ownership data(\"firms_BKB\") x <- FF.naive.ownership(firms_BKB) FF.graph.custom(x = x, node.size = 3) #> Warning: vertex.size should indicate the attribute to represent, #>               not the size. Correcting... #> IGRAPH 007936c DNW- 47 1790 --  #> + attr: name (v/c), size (v/n), color (v/c), weight (e/n), color (e/c), #> | width (e/n) #> + edges from 007936c (vertex names): #>  [1] DVA->KHC   DVA->OXY   DVA->AXP   DVA->LSXMA DVA->LSXMK DVA->MCO   #>  [7] DVA->BAC   DVA->HPQ   DVA->VRSN  DVA->PARA  DVA->USB   DVA->ATVI  #> [13] DVA->KO    DVA->BK    DVA->RH    DVA->CVX   DVA->KR    DVA->CE    #> [19] DVA->GL    DVA->AAPL  DVA->FND   DVA->GM    DVA->FWONK DVA->MKL   #> [25] DVA->ALLY  DVA->C     DVA->CHTR  DVA->AON   DVA->MCK   DVA->SNOW  #> [31] DVA->V     DVA->MA    DVA->TMUS  DVA->RPRX  DVA->MMC   DVA->MDLZ  #> [37] DVA->VZ    DVA->JNJ   DVA->PG    DVA->AMZN  DVA->UPS   KHC->DVA   #> + ... omitted several edges #>  #>  #> A network representing common ownership #>  #> The size of the vertexes does not represent an attribute #>  #> The colour of the vertexes does not represent an attribute #>  #> The width of the edges does not represent their strength #>  #> The colour (greyscale) of the edges does not represent their strength"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"Create object class igraph package igraph using FF matrix class financial_matrix using default aesthetic options","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"","code":"FF.graph(x, aesthetic = c(\"simple\", \"nice\"))"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"x matrix-like object produced FF related functions. aesthetic Choose pre-set graph's look. Either 'simple' 'nice' (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"network desired format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"function allow additional arguments can passed FF.graph.custom.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"loops-and-values","dir":"Reference","previous_headings":"","what":"Loops and values","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"Loops allowed least one matrix's diagonal entries zero. igraph valued least one entry matrix neither zero one. Instead, aesthetic set 'simple': width ties 1; colour ties #b4b4b4 (Philippine Silver); size nodes 5; colour nodes #081677 (Gentian blue). Otherwise, aesthetic set 'nice': width ties 1; colour ties grey scale reflecting tie strength graph valued, otherwise #b4b4b4 (Philippine Silver); size nodes reflects capitalisation firms data ranges 1 5, otherwise 5 nodes; colour nodes reflects sector firms data taken built-palette, otherwise #081677 (Gentian blue).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily represent a firm-firm (FF) network using the package igraph — FF.graph","text":"","code":"# Create a nice graph representation of the binary FF of # Berkshire Hataway's holdings based on common ownership data(\"firms_BKB\") x <- FF.naive.ownership(firms_BKB) FF.graph(x = x, aesthetic = 'nice') #> IGRAPH 6255444 DNW- 47 1790 --  #> + attr: name (v/c), size (v/n), color (v/c), weight (e/n), color (e/c), #> | width (e/n) #> + edges from 6255444 (vertex names): #>  [1] DVA->KHC   DVA->OXY   DVA->AXP   DVA->LSXMA DVA->LSXMK DVA->MCO   #>  [7] DVA->BAC   DVA->HPQ   DVA->VRSN  DVA->PARA  DVA->USB   DVA->ATVI  #> [13] DVA->KO    DVA->BK    DVA->RH    DVA->CVX   DVA->KR    DVA->CE    #> [19] DVA->GL    DVA->AAPL  DVA->FND   DVA->GM    DVA->FWONK DVA->MKL   #> [25] DVA->ALLY  DVA->C     DVA->CHTR  DVA->AON   DVA->MCK   DVA->SNOW  #> [31] DVA->V     DVA->MA    DVA->TMUS  DVA->RPRX  DVA->MMC   DVA->MDLZ  #> [37] DVA->VZ    DVA->JNJ   DVA->PG    DVA->AMZN  DVA->UPS   KHC->DVA   #> + ... omitted several edges #>  #>  #> A network representing common ownership #>  #> The size of the vertexes represents the firms capitalisation #>  #> The colour of the vertexes does not represent an attribute #>  #> The width of the edges does not represent their strength #>  #> The colour (greyscale) of the edges represents their strength"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":null,"dir":"Reference","previous_headings":"","what":"Create any firm-firm (FF) matrix — FF","title":"Create any firm-firm (FF) matrix — FF","text":"General function create firm-firm (FF) matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create any firm-firm (FF) matrix — FF","text":"","code":"FF(..., who, ties, id_as_firm_name = NULL, Matrix = NULL, self_ties = FALSE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create any firm-firm (FF) matrix — FF","text":"... Either multiple objects class firm list objects Whether take account: (ownership) co-ownership ; (management) board interlocks, (recognises minimum unambiguous strings). ties Type ties create. Possible values: binary; naive; share (see Details). id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create any firm-firm (FF) matrix — FF","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create any firm-firm (FF) matrix — FF","text":"See specific functions detailed overview: board interlocks (== 'management'): FF.binary.management, ties = 'binary'; FF.binary.management, ties = 'naive'; FF.norm.management, ties = 'share'. co-ownership (== 'ownership'): FF.binary.ownership, ties = 'binary'; FF.naive.ownership, ties = 'naive'; FF.norm.ownership, ties = 'share'. co-ownership board interlocks (== ''): FF.binary., ties = 'binary'; FF.naive., ties = 'naive'; FF.norm., ties = 'share'.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create any firm-firm (FF) matrix — FF","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create any firm-firm (FF) matrix — FF","text":"","code":"# Create the normalised FF matrix of Berkshire Hathaway's holdings by boards interlocks data('firms_BKB') FF <- FF(firms_BKB, who = 'man', ties = 'share')"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"Function create naive-valued firm-firm (FF) matrix based common ownership board interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"","code":"FF.naive.both(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE,   combining = \"sum\" )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE. combining combine FF matrix managers owners. Possible values: sum; mean average; min; max;","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"ties' value reflect count common owners membership depending combining: sum: sum counts; mean average: average counts; min: minimum counts; max: maximum counts.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.both.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete naive-valued firm-firm (FF) matrix — FF.naive.both","text":"","code":"# Create the complete naive firm-firm matrix for the companies held by Berkshire Hathaway data('firms_BKB') FF <- FF.naive.both(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"Function create naive-valued firm-firm (FF) matrix based boards interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"","code":"FF.naive.management(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"Naive-valued means simply counting number common managers.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.management.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a naive-valued firm-firm (FF) matrix for boards interlocks — FF.naive.management","text":"","code":"# Create the naive FF matrix of Berkshire Hathaway's holdings by boards interlocks data('firms_BKB') FF <- FF.naive.management(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"Function create naive-valued firm-firm (FF) matrix based common ownership","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"","code":"FF.naive.ownership(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"Naive-valued means simply counting number common owners","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.naive.ownership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a naive-valued firm-firm (FF) matrix for common ownership — FF.naive.ownership","text":"","code":"# Create the naive FF matrix of Berkshire Hathaway's holdings by common ownership data('firms_BKB') FF <- FF.naive.ownership(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent a firm-firm (FF) network using the package network — FF.net.custom","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"Create object class network package network using FF matrix class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"","code":"FF.net.custom(   x,   vertex.size = NULL,   vertex.colour = NULL,   edge.width = NULL,   edge.greyscale = NULL,   directed = TRUE,   loops = FALSE,   weighted = any(x@M %in% c(0, 1)),   ... )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"x matrix-like object produced FF related functions vertex.size piece information firms used represent nodes' size (see Details). vertex.colour piece  information firms used represent nodes' colours (see Details). edge.width Whether use edges' width represent tie strength. Defaults FALSE. edge.greyscale Whether use edges' colour represent tie strength grey scale. Defaults TRUE matrix valued. directed Whether network directed. Defaults TRUE loops Whether network loops. Defaults FALSE weighted Whether ties/edges weighted. Defaults TRUE element matrix equals neither 0 1 ... Aliases parameters additional settings (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"network desired format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"function allows number additional arguments.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"what-can-be-passed-to-vertex-colour-and-vertex-size","dir":"Reference","previous_headings":"","what":"What can be passed to vertex.colour and vertex.size","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"pieces information possible pass vertex.size vertex.colour : capitalisation, arranged steps (see capitalisation.bins ) revenue, arranged steps (see revenues.bins ) legal_form sector currency","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"what-can-be-passed-to-edge-width-and-edge-greyscale","dir":"Reference","previous_headings":"","what":"What can be passed to edge.width and edge.greyscale","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"pieces information possible pass edge.width edge.greyscale : capitalisation revenue","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"additional-parameters-related-to-vertex-size","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.size","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"effect additional parameters modify behaviour vertex.size : vertex.size.max (defaults 5): vertex.size one aliases specified, size biggest vertex; neither vertex.size aliases given, size vertices. vertex.size.min (defaults 1): vertex.size one aliases specified, size smallest vertex; neither vertex.size aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"additional-parameters-related-to-vertex-colour","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.colour","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"additional parameter related vertex.colour vertex.colour.palette. supports vector RGB named colours (see colours named colours R). also accepts complete calls functions return vector like RColorBrewer::brewer.pal(n, name) viridisLite::viridis(n, option). palette short, extended automatically using colorRampPalette. palette declared, arguemnt TRUE, defaulr following vector colours: #00204D, Oxford Blue #31446B, Police Blue #666970, Dim Gray #958F78, Artichoke #CBBA69, Dark Khaki #FFEA46, Gargoyle Gas argument FALSE, NULL NA, vertex coloured #081677 (Gentian blue).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"additional-parameters-related-to-edge-width","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.width","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"edge.width.max (defaults 5): edge.width one aliases specified, thickness thickest edge; neither edge.width aliases given, thickness edges edge.width.min (defaults 1): edge.width one aliases specified, thickness slimmest edge; neither edge.width aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"additional-parameters-related-to-edge-greyscale","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.greyscale","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"edge.greyscale.darkest (defaults 5) : edge.greyscale one aliases specified, thickness thickest edge; neither edge.greyscale aliases given, thickness edges edge.greyscale.fairest (defaults 1): edge.greyscale one aliases specified, thickness slimmest edge; neither edge.greyscale aliases given, ignored. Several aliases accepted arguments, except M: vertex.size: node.size vertex.colour: vertex.color, node.colour, node.color; edge.width: tie.width edge.greyscale: tie.grayscale, tie.greyscale, edge.grayscale","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent a firm-firm (FF) network using the package network — FF.net.custom","text":"","code":"# Create the network representation of the binary FF of # Berkshire Hataway's holdings based on common ownership data(\"firms_BKB\") x <- FF.naive.ownership(firms_BKB) FF.net.custom(x = x, node.size = 3) #> Warning: vertex.size should indicate the attribute to represent, #>               not the size. Correcting... #>  Network attributes: #>   vertices = 47  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 1790  #>     missing edges= 0  #>     non-missing edges= 1790  #>  #>  Vertex attribute names:  #>     color size vertex.names  #>  #>  Edge attribute names not shown  #>  #>  #> A network representing common ownership"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily represent a firm-firm (FF) network using the package network — FF.net","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"Create object class network package network using FF matrix class financial_matrix using default aesthetic options","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"","code":"FF.net(x, aesthetic = c(\"simple\", \"nice\"))"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"x matrix-like object produced FF related functions. aesthetic Choose pre-set network's look. Either 'simple' 'nice' (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"network desired format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"function allow additional arguments can passed FF.net.custom.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"loops-and-values","dir":"Reference","previous_headings":"","what":"Loops and values","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"Loops allowed least one matrix's diagonal entries zero. network valued least one entry matrix neither zero one. Instead, aesthetic set 'simple': width ties 1; colour ties #b4b4b4 (Philippine Silver); size nodes 5; colour nodes #081677 (Gentian blue). Otherwise, aesthetic set 'nice': width ties 1; colour ties grey scale reflecting tie strength network valued, otherwise #b4b4b4 (Philippine Silver); size nodes reflects capitalisation firms data ranges 1 5, otherwise 5 nodes; colour nodes reflects sector firms data taken built-palette, otherwise #081677 (Gentian blue).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily represent a firm-firm (FF) network using the package network — FF.net","text":"","code":"# Create a nice network representation of the binary FF of # Berkshire Hataway's holdings based on common ownership data(\"firms_BKB\") x <- FF.naive.ownership(firms_BKB) FF.net(x = x, aesthetic = 'nice') #>  Network attributes: #>   vertices = 47  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 1790  #>     missing edges= 0  #>     non-missing edges= 1790  #>  #>  Vertex attribute names:  #>     color size vertex.names  #>  #>  Edge attribute names not shown  #>  #>  #> A network representing common ownership  #>  #> The size of the nodes represents the firms capitalisation #> The colour (greyscale) of the ties represents their strength"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"Function create normalised-valued firm-firm (FF) matrix based common ownership board interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"","code":"FF.norm.both(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE,   combining = \"sum\" )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE. combining combine FF matrix managers owners. Possible values: sum; mean average; min; max;","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"ties' value reflect count common owners membership depending combining:  -sum: sum shares (normalised 2);  -mean average: average shares (normalised 1);  -min: minimum shares (normalised 1);  -max: maximum shares (normalised 1).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.both.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete normalised-valued firm-firm (FF) matrix — FF.norm.both","text":"","code":"# Create the complete normalised firm-firm matrix for the companies held by Berkshire Hathaway data('firms_BKB') FF <- FF.norm.both(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"Function create normalised-valued firm-firm (FF) matrix based boards interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"","code":"FF.norm.management(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"Normalised-valued means weights represent share common managers.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.management.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a normalised-valued firm-firm (FF) matrix for boards interlocks — FF.norm.management","text":"","code":"# Create the normalised FF matrix of Berkshire Hathaway's holdings by boards interlocks data('firms_BKB') FF <- FF.norm.management(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"Function create normalised-valued firm-firm (FF) matrix based common ownership","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"","code":"FF.norm.ownership(   ...,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"Normalised-valued means weights represent share common managers.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FF.norm.ownership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a normalised-valued firm-firm (FF) matrix for common ownership — FF.norm.ownership","text":"","code":"# Create the normalised FF matrix of Berkshire Hathaway's holdings by common ownership data('firms_BKB') FF <- FF.norm.ownership(firms_BKB)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"Function create (necessarily binary) firm-manager (FM) matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"","code":"FM(..., id_as_firm_name = NULL, Matrix = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE 10,000 combinations package installed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"matrix object class financial_matrix (possibly using Matrix package) : rows Represent firms; columns Represent managers (usually physical persons).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a (necessarily binary) firm-manager (FM) matrix — FM","text":"","code":"# Create the FM matrix of Berkshire Hathaway's holdings # \\donttest{ data('firms_BKB')   FM <- FM(firms_BKB) # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a binary firm-owner (FO) matrix — FO.binary","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"Function create binary firm-owner (FO) matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"","code":"FO.binary(..., id_as_firm_name = NULL, Matrix = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE 10,000 combinations package installed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"matrix object class financial_matrix (possibly using Matrix package) : rows Represent firms; columns Represent owners (physical legal persons).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a binary firm-owner (FO) matrix — FO.binary","text":"","code":"# Create the binary FO matrix of Berkshire Hathaway's holdings # \\donttest{ data('firms_BKB') FO <- FO.binary(firms_BKB) # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"values simply value owner \\(j\\)'s stake firm \\(\\).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"","code":"FO.naive(..., id_as_firm_name = NULL, Matrix = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE 10,000 combinations package installed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"matrix object class financial_matrix (possibly using Matrix package) : rows Represent firms; columns Represent owners (physical legal persons).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.naive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.naive","text":"","code":"# Create the naive FO matrix of Berkshire Hathaway's holdings # \\donttest{ data('firms_BKB') FO <- FO.naive(firms_BKB) # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"values represent share firm \\(\\)'s capital owned \\(j\\).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"","code":"FO.norm(..., id_as_firm_name = NULL, Matrix = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"... Either multiple objects class firm list objects id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE 10,000 combinations package installed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"matrix object class financial_matrix (possibly using Matrix package) : rows Represent firms; columns Represent owners (physical legal persons).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/FO.norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a naive-valued firm-owner (FO) matrix — FO.norm","text":"","code":"# Create the normalised FO matrix of Berkshire Hathaway's holdings # \\donttest{ data('firms_BKB') FO <- FO.norm(firms_BKB) # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/Matrix-and-matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"A (virtual) class union for matrix-like objects to be included in financial_matrix — Matrix&matrix","title":"A (virtual) class union for matrix-like objects to be included in financial_matrix — Matrix&matrix","text":"un-exported basis S4 classes financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/add.attribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","title":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","text":"Function set vertex  edge attribute network graph object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/add.attribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","text":"","code":"add.attribute(x, where = c(\"edge\", \"vertex\"), attr_name, value, which = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/add.attribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","text":"x representation network network graph object network element attribute refer . Either edge/tie vertex/node. attr_name Name attribute set value attribute set subset elements attribute applied. Defaults vertexes/nodes.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/add.attribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","text":"network graph object desired attribute","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/add.attribute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to set a vertex  or edge attribute of a network or graph object — add.attribute","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm-financial_matrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","title":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","text":"`.firm` method object class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm-financial_matrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","text":"","code":"# S4 method for financial_matrix as.firm(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm-financial_matrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","text":"x financial_matrix object coerce ... Optional arguments","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm-financial_matrix-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","text":"(usually named) list firm objects length equals number rows columns provided financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm-financial_matrix-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a financial_matrix object into a list of firm objects — as.firm,financial_matrix-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.financial_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","title":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","text":"Un-exported function behind .firm method objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.financial_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","text":"","code":"as.firm.financial_matrix(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.financial_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","text":"... Optional argument method FF object class financial_matrix coerced","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.financial_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","text":"(usually named) list firm objects length equals number rows columns provided financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.financial_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a financial_matrix object into a list of firm objects — as.firm.financial_matrix","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce into (a list of) firm object(s) — as.firm","title":"Coerce into (a list of) firm object(s) — as.firm","text":"Generic function coerce classes S4 class firm representing firm (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce into (a list of) firm object(s) — as.firm","text":"","code":"as.firm(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce into (a list of) firm object(s) — as.firm","text":"x object coerce ... Arguments passed class-specific methods","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce into (a list of) firm object(s) — as.firm","text":"object class firm (usually named) list , depending available method object coerced.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/as.firm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce into (a list of) firm object(s) — as.firm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.against.other.slots.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if all the non-NA slots of a financial_matrix object are of a given length — check.against.other.slots","title":"Determine if all the non-NA slots of a financial_matrix object are of a given length — check.against.other.slots","text":"Un-exported function called ncol nrow methods objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.against.other.slots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if all the non-NA slots of a financial_matrix object are of a given length — check.against.other.slots","text":"","code":"check.against.other.slots(x, number)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.against.other.slots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if all the non-NA slots of a financial_matrix object are of a given length — check.against.other.slots","text":"x object class financial_matrix extract unique elements number number check length x's non-NA slots","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.against.other.slots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine if all the non-NA slots of a financial_matrix object are of a given length — check.against.other.slots","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.correct.grey.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","title":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","text":"Function check whether provided colour actually shade grey correct necessary","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.correct.grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","text":"","code":"check.correct.grey(hex)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.correct.grey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","text":"hex RGB colour check","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.correct.grey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","text":"valid grey colour RGB format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/check.correct.grey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to check whether the provided colour is actually a shade of grey and correct it if necessary — check.correct.grey","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/dot-set_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return an object after assigning new names — .set_names","title":"Function to return an object after assigning new names — .set_names","text":"Combines magrittr::set_colnames, magrittr::set_rownames, magrittr::set_names","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/dot-set_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return an object after assigning new names — .set_names","text":"","code":".set_names(x, names, where = c(\"col\", \"row\", \"attr\"))"},{"path":"https://fatelarico.github.io/FinNet.html/reference/dot-set_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return an object after assigning new names — .set_names","text":"x Object operate names New names change: - col Column names - row Row names - names Names attribute","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/dot-set_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return an object after assigning new names — .set_names","text":"original object, new names","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/dot-set_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to return an object after assigning new names — .set_names","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/financial_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for the adjacency matrix produced by FF and related functions to represent the relations between firms (legal person) — financial_matrix","title":"An S4 class for the adjacency matrix produced by FF and related functions to represent the relations between firms (legal person) — financial_matrix","text":"S4 class adjacency matrix produced FF related functions represent relations firms (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/financial_matrix.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for the adjacency matrix produced by FF and related functions to represent the relations between firms (legal person) — financial_matrix","text":"M Adjacency matrix relation Relations represented matrix legal_form Legal form firms sector Sector firms operate revenues Yearly revenues capitalisation Firms' capitalisation currency Currency capitalisation revenues expressed","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/financial_net.html","id":null,"dir":"Reference","previous_headings":"","what":"A virtual class for relational data extending the packages networkand igraph — financial_net","title":"A virtual class for relational data extending the packages networkand igraph — financial_net","text":"un-exported virtual base S4 classes igraph_financial network_financial represent relations firms (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/financial_net.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A virtual class for relational data extending the packages networkand igraph — financial_net","text":"relation Relations represented matrix vertex.size Attribute used determine vertexes' size vertex.color Attribute used determine vertexes' colour edge.width Whether edges' width reflect tie weight edge.greyscale Whether edges' color reflects tie weight","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"Tickers can retrieved [Yahoo! Finance](https://finance.yahoo.com/lookup/). function requires package yahoofinancer installed. available CRAN running install.packages('yahoofinancer').","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"","code":"find.firm(   ticker,   name = NULL,   ticker_is_id = TRUE,   legal_form = NULL,   sector_granularity = 1,   managers_remove_salutation_title = TRUE,   managers_only_surname = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"ticker Firm's ticker. name Provide firm's name. provided, NA, NULL, default string provided ticker. ticker_is_id ticker used firm's id? legal_form firm's legal form firm. Possible values: - string (e.g., 'LLC', 'Private', 'GmbH', etc.); - NULL (default), case function set legal_form 'JSC'; - NA specify legal form. sector_granularity Sector firm operates. Possible values: - 0, NULL, NA omit sector; - 1 'generic' (default) generic description (e.g., 'Consumer Technology', 'Consumer Cyclical', 'Consumer Defensive'); - 2 'specifc' granular description (e.g., 'Technology', 'Auto Manufacturers', 'Tobacco'). managers_remove_salutation_title Yahoo! Finance provide salutation titles names managers. TRUE (default), omitted. managers_only_surname Yahoo! Finance provide first, middle, last name managers. TRUE (recommended large data sets), surname returned.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"object S4 class firm containing several fields, first one mandatory: name Name firm (ticker name provided) id Firm' ticker (ticker_is_id `TRUE`) nothing (otherwise) legal_form Legal form firm (may null) sector Sector firm operates (may null) revenues Yearly revenues capitalisation Capitalisation management Members board ownership Owner(s) shares Share owned () owner(s) currency Currency","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a firm (legal person) using data from 'Yahoo! Finance' — find.firm","text":"","code":"# Registering Apple automatically AAPL <- find.firm(ticker = 'AAPL', name = 'Apple', legal_form = 'Inc')"},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"legal_form vector containing: - one NULL elements, corresponding firm's legal form JSC; - one NAs, corresponding firm's legal form NA.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"","code":"find.firms(   tickers,   name = NULL,   ticker_is_id = TRUE,   legal_form = NULL,   sector_granularity = 1,   managers_remove_salutation_title = TRUE,   managers_only_surname = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"tickers firms' ticker. name Provide firms' names vector length tickers. provided, NA, NULL, default firm's ticker. ticker_is_id ticker used firm's id? legal_form firm's legal form firm. Possible values: - vector strings (e.g., 'LLC', 'Private', 'GmbH', etc.) length tickers (see 'Details' interpretation NAs NULLs); - NULL (default), case function set legal_form 'JSC' firms; - NA specify legal form. sector_granularity Sector firm operates. Possible values: - 0, NULL, NA omit sector; - 1 'generic' (default) generic description (e.g., 'Consumer Technology', 'Consumer Cyclical', 'Consumer Defensive'); - 2 'specifc' granular description (e.g., 'Technology', 'Auto Manufacturers', 'Tobacco'). managers_remove_salutation_title Yahoo! Finance provide salutation titles names managers. TRUE (default), omitted. managers_only_surname Yahoo! Finance provide first, middle, last name managers. TRUE (recommended large data sets), surname returned.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"object S4 class firm containing several fields, first one mandatory: name Name firm (ticker name provided) id Firm' ticker (ticker_is_id `TRUE`) nothing (otherwise) legal_form Legal form firm (may null) sector Sector firm operates (may null) revenues Yearly revenues capitalisation Capitalisation management Members board ownership Owner(s) shares Share owned () owner(s) currency Currency","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"ensure consistency, ticker_is_id, sector_granularity, managers_remove_salutation_title, managers_only_surname vectors. Tickers can retrieved [Yahoo! Finance](https://finance.yahoo.com/lookup/). function requires package yahoofinancer installed. available CRAN running install.packages('yahoofinancer').","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.firms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create mutiple firms (legal persons) using data from 'Yahoo! Finance' — find.firms","text":"","code":"# Registering Apple, General Motors, and British American Tobacco automatically firms_US <- find.firms(tickers = c('AAPL', 'GM', 'BTI'),                        name = c('Apple', 'General Motors', 'British American Tobacco'),                        legal_form = 'Inc') #>  #> Progress status: 1/3 #>  [========================------------------------------------------------]  33% #>  #> Progress status: 2/3 #>  [================================================------------------------]  66% #>  #> Progress status: 3/3 #>  [=========================================================================]  100% #>"},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all the unique people associated to at least one of the provided firm objects — find.people","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"Extract unique people associated least one provided firm objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"","code":"find.people(..., who = c(\"managers\", \"owners\", \"both\", \"all\"), sorting = TRUE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"... Either multiple objects class firm list objects Whether extract 'managers' 'owners' (minimum unambiguous string) sorting Whether sort people alphabetical order. Defaults TRUE","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"vector containing names individuals looked . ","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/find.people.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all the unique people associated to at least one of the provided firm objects — find.people","text":"","code":"# Find all the shareholders in companies that Berkshire Hathaway holds data('firms_BKB') shareholders <- find.people(firms_BKB, who = 'own')  # Find all those managing the companies that Berkshire Hathaway holds data('firms_BKB') managers <- find.people(firms_BKB, who = 'man')"},{"path":"https://fatelarico.github.io/FinNet.html/reference/firm.html","id":null,"dir":"Reference","previous_headings":"","what":"A firm — firm","title":"A firm — firm","text":"S4 class representing firm (legal person) financial entity","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A firm — firm","text":"S4 class stores information firm created using register.firm find.firm. firm's property can accessed using relative function (see query.firm)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A firm — firm","text":"name Name firm id Provide ID code firm. legal_form Legal form firm sector Sector firm operates sector_classif Activity sector classification () revenues Yearly revenues capitalisation Firm's capitalisation management Names members board ownership Names owner(s) shares Share owned () owner(s) currency Currency capitalisation revenues expressed","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_BKB.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Berkshire Hathaway Portfolio — firms_BKB","title":"Complete Berkshire Hathaway Portfolio — firms_BKB","text":"Data Apple (AAPL), General Motors (GM), British American Tobacco (BTI) extracted Yahoo! Finance (May 20, 2023) formatted firm objects.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_BKB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete Berkshire Hathaway Portfolio — firms_BKB","text":"","code":"data('firms_BKB')"},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_BKB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete Berkshire Hathaway Portfolio — firms_BKB","text":"Three objects class firm.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_BKB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Complete Berkshire Hathaway Portfolio — firms_BKB","text":"- Divine, John. “Complete Berkshire Hathaway Portfolio.” FInancial data. U.S. News & World Report, May 17, 2023. <https://money.usnews.com/investing/stock-market-news/articles/-complete-berkshire-hathaway-portfolio>. - ICE Data Services. “Nasdaq Stock Exchange & Dow Jones Indexes.” Financial data, May 21, 2023, <https://finance.yahoo.com/lookup/>.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_US.html","id":null,"dir":"Reference","previous_headings":"","what":"Three US firms — firms_US","title":"Three US firms — firms_US","text":"Data Apple (AAPL), General Motors (GM), British American Tobacco (BTI) extracted Yahoo! Finance (May 20, 2023) formatted firm objects.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_US.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three US firms — firms_US","text":"","code":"data('firms_US')"},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_US.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Three US firms — firms_US","text":"Three objects class firm.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/firms_US.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Three US firms — firms_US","text":"ICE Data Services. “Nasdaq Stock Exchange & Dow Jones Indexes.” Financial data, May 21, 2023, <https://finance.yahoo.com/lookup/>","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"Extending igraph functions to igraph_financial objects — graph_methods","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"following functions implemented: V_fin retrieve vertexes (igraph::V); vcount_fin count vertexes (igraph::vcount); gorder_fin alias vcount_fin (igraph::gorder); E_fin retrieve edges (igraph::E); gsize_fin count edges (igraph::gsize); ecount_fin alias gsize_fin (igraph::ecount) plot_igraph_fin plot graphs (igraph::plot.igraph))","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"","code":"V(x)  vcount(x)  gorder(x)  E(x, ...)  ecount(x, ...)  gsize(x, ...)  plot_igraph(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"x igraph_financial object ... parameters passed corresponding igraph functions (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"result igraph igraph_financial objects V: vertex sequence containing vertices, order numeric vertex ids. vcount gorder: Number vertices, numeric scalar. E: edge sequence graph ecount gsize: Number edges, numeric scalar. plot_igraph: Returns NULL, invisibly. Called print graph R device. (see method igraph::plot.igraph)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"Implementing basic iterators package igraph objects class igraph_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/fun-igraph_financial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extending igraph functions to igraph_financial objects — graph_methods","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.binarary.values.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","title":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","text":"Function compute binary values FM FO matrix multiple firm objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.binarary.values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","text":"","code":"get.binarary.values(firms, which, cols = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.binarary.values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","text":"firms List objects operate Whether use ownership management construct matrix cols Possible values assumed enquired variable (determined autmotically provided)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.binarary.values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","text":"values filled binary FO FM matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.binarary.values.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compute the binary values of the FM or FO matrix for multiple firm objects — get.binarary.values","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"Function create firm-firm (FF) matrix based common ownership board interlocks","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"","code":"get.matrix.adjacency.both(   ...,   ties = 3,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE,   combining = \"sum\" )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"... Either multiple objects class firm list objects ties Type ties create. Defaults 2; possible values, see details. id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE. combining combine FF matrix managers owners (see Details);","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"possible values ties effect relative value : binary 1 binary ties: \\(1\\) least one common manager owner, \\(0\\) otherwise. naive, 2 'naively' valued ties indicating number common managers owners. share 3 (default) 'normalised' tie values. actual value depends combining: sum (default), sum share \\(\\)'s owners also amongst \\(j\\)'s owners share \\(\\)'s managers also amongst \\(j\\)'s managers (normalised 2); mean avg, mean share \\(\\)'s owners also amongst \\(j\\)'s owners share \\(\\)'s managers also amongst \\(j\\)'s managers (normalised 1); max, maximum share \\(\\)'s owners also amongst \\(j\\)'s owners share \\(\\)'s managers also amongst \\(j\\)'s managers (normalised 1); min, minimum share \\(\\)'s owners also amongst \\(j\\)'s owners share \\(\\)'s managers also amongst \\(j\\)'s managers (normalised 1);","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.both.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a firm-firm (FF) matrix — get.matrix.adjacency.both","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"Function create firm-firm (FF) matrix based ownership board interlocks:","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"","code":"get.matrix.adjacency(   ...,   who = c(\"managers\", \"owners\"),   ties = 3,   id_as_firm_name = NULL,   Matrix = NULL,   self_ties = FALSE )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"... Either multiple objects class firm list objects Whether extract 'managers' 'owners' (minimum unambiguous string) ties Type ties create. Defaults 2; possible values, see details. id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE matrix pipeline contains 10,000 cells package installed. self_ties Whether allow self-ties ('loop' graph theory). Defaults FALSE.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"matrix object class financial_matrix(possibly using Matrix package)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"possible values ties effect relative value : binary 0 binary ties. Namely: owners: \\(1\\) least one common owner, \\(0\\) otherwise; managers: \\(1\\) least one common manager, \\(0\\) otherwise. naive, 1 'naively' valued ties. Namely: owners, number common owners; managers, number common managers. share 2 (default) 'normalised' tie values. Namely: owners, share \\(\\)'s owners also amongst \\(j\\)'s owners; managers, share \\(\\)'s managers also amongst \\(j\\)'s managers.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.adjacency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create any firm-firm (FF) matrix for common ownership or board interlocks — get.matrix.adjacency","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.twomode.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","title":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","text":"possible values ties : binary 1 binary ties; weighted, valued, 2 weight tie company \\(\\) person \\(j\\) value \\(j\\)'s share \\(\\)'s capital; share 3 (default) weight tie company \\(\\) person \\(j\\) share \\(\\)'s capital owned \\(j\\).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.twomode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","text":"","code":"get.matrix.twomode(..., who, ties = 3, id_as_firm_name = NULL, Matrix = NULL)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.twomode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","text":"... Either multiple objects class firm list objects Whether extract 'managers' 'owners' (minimum unambiguous string) ties Type ties create. Defaults 3; possible values, see details. id_as_firm_name Whether use ticker firm's name. Defaults TRUE firms' id neither NULL NA. Matrix Whether use Matrix package. Defaults TRUE 10,000 combinations package installed.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.twomode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","text":"matrix object class financial_matrix (possibly using Matrix package) : rows Represent firms; columns Represent managers/owners (physical legal persons).","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.matrix.twomode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a firm-owner (FO) or firm-manager (FM) matrix — get.matrix.twomode","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":null,"dir":"Reference","previous_headings":"","what":"Create any firm-firm (FF) network — get.net","title":"Create any firm-firm (FF) network — get.net","text":"Create network (either object class network package network graph object package igraph) FF, FO, FM matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create any firm-firm (FF) network — get.net","text":"","code":"get.net(   x,   vertex.size = NULL,   vertex.colour = NULL,   edge.width = NULL,   edge.greyscale = NULL,   format = c(\"igraph\", \"network\"),   directed = TRUE,   loops = FALSE,   weighted = any(x@M %in% c(0, 1)),   ... )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create any firm-firm (FF) network — get.net","text":"x matrix-like object produced FF related functions vertex.size piece information firms used represent nodes' size (see Details). vertex.colour piece  information firms used represent nodes' colours (see Details). edge.width Whether use edges' width represent tie strength. Defaults FALSE. edge.greyscale Whether use edges' colour represent tie strength grey scale. Defaults TRUE matrix valued. format format use network. Possible values: igraph network directed Whether network directed. Defaults TRUE loops Whether network loops. Defaults FALSE weighted Whether ties/edges weighted. Defaults TRUE element matrix equals neither 0 1 ... Aliases parameters additional settings (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create any firm-firm (FF) network — get.net","text":"network desired format","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create any firm-firm (FF) network — get.net","text":"function allows number additional arguments.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"what-can-be-passed-to-vertex-colour-and-vertex-size","dir":"Reference","previous_headings":"","what":"What can be passed to vertex.colour and vertex.size","title":"Create any firm-firm (FF) network — get.net","text":"pieces information possible pass vertex.size vertex.colour : capitalisation, arranged steps (see capitalisation.bins ) revenue, arranged steps (see revenues.bins ) legal_form sector currency","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"what-can-be-passed-to-edge-width-and-edge-greyscale","dir":"Reference","previous_headings":"","what":"What can be passed to edge.width and edge.greyscale","title":"Create any firm-firm (FF) network — get.net","text":"pieces information possible pass edge.width edge.greyscale : - capitalisation - revenue","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"additional-parameters-related-to-vertex-size","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.size","title":"Create any firm-firm (FF) network — get.net","text":"effect additional parameters modify behaviour vertex.size : vertex.size.max (defaults 5) : vertex.size one aliases specified, size biggest vertex; neither vertex.size aliases given, size vertices. vertex.size.min (defaults 1): vertex.size one aliases specified, size smallest vertex; neither vertex.size aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"additional-parameters-related-to-vertex-colour","dir":"Reference","previous_headings":"","what":"Additional parameters related to vertex.colour","title":"Create any firm-firm (FF) network — get.net","text":"additional parameter related vertex.colour vertex.colour.palette. supports vector RGB named colours (see colours named colours R). also accepts complete calls functions return vector like RColorBrewer::brewer.pal(n, name) viridisLite::viridis(n, option). palette short, extended automatically using colorRampPalette. palette declared, arguemnt TRUE, defaulr following vector colours: #00204D, Oxford Blue #31446B, Police Blue #666970, Dim Gray #958F78, Artichoke #CBBA69, Dark Khaki #FFEA46, Gargoyle Gas argument FALSE, NULL NA, vertex coloured #081677 (Gentian blue).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"additional-parameters-related-to-edge-width","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.width","title":"Create any firm-firm (FF) network — get.net","text":"edge.width.max (defaults 5) : edge.width one aliases specified, thickness thickest edge; neither edge.width aliases given, thickness edges edge.width.min (defaults 1): edge.width one aliases specified, thickness slimmest edge; neither edge.width aliases given, ignored.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"additional-parameters-related-to-edge-greyscale","dir":"Reference","previous_headings":"","what":"Additional parameters related to edge.greyscale","title":"Create any firm-firm (FF) network — get.net","text":"edge.greyscale.darkest (defaults 5): edge.greyscale one aliases specified, thickness thickest edge; neither edge.greyscale aliases given, thickness edges edge.greyscale.fairest (defaults 1): edge.greyscale one aliases specified, thickness slimmest edge; neither edge.greyscale aliases given, ignored. Several aliases accepted arguments, except M: vertex.size: node.size vertex.colour: vertex.color, node.colour, node.color; edge.width: tie.width edge.greyscale: tie.grayscale, tie.greyscale, edge.grayscale","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/get.net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create any firm-firm (FF) network — get.net","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_E_iterators.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","title":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","text":"Methods extend igraph edge iterators functions igraph_financial objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_E_iterators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","text":"","code":"# S4 method for igraph_financial E(x, ...)  # S4 method for igraph E(x, ...)  # S4 method for igraph_financial ecount(x, ...)  # S4 method for igraph ecount(x, ...)  # S4 method for igraph_financial gsize(x, ...)  # S4 method for igraph gsize(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_E_iterators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","text":"x igraph_financial object ... parameters passed corresponding method /igraph functions (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_E_iterators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","text":"result igraph igraph_financial objects E: edge sequence graph ecount gsize: Number edges, numeric scalar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_E_iterators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igraph edge iterators for igraph_financial objects — igraph_E_iterators","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for relational data extending the package igraph — igraph_financial","title":"An S4 class for relational data extending the package igraph — igraph_financial","text":"S4 class network objects produced FF.graph FF.graph.custom represent relations firms (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_financial.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for relational data extending the package igraph — igraph_financial","text":"data representation network igraph object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_v_iterators.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","title":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","text":"Methods extend igraph vertex iterators functions igraph_financial objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_v_iterators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","text":"","code":"# S4 method for igraph_financial V(x)  # S4 method for igraph V(x)  # S4 method for igraph_financial vcount(x)  # S4 method for igraph vcount(x)  # S4 method for igraph_financial gorder(x)  # S4 method for igraph gorder(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_v_iterators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","text":"x igraph_financial object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_v_iterators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","text":"result igraph igraph_financial objects V: vertex sequence containing vertices, order numeric vertex ids vcount gorder: Number vertices, numeric scalar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/igraph_v_iterators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igraph vertex iterators for igraph_financial objects — igraph_v_iterators","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.neither.null.nor.na.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","title":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","text":"Combines base::.na()|> magrittr::() base::.null|> magrittr::()","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.neither.null.nor.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","text":"","code":"is.neither.null.nor.na(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.neither.null.nor.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","text":"x Object operate","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.neither.null.nor.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","text":"Logical: TRUE x neither NA NULL, FALSE otherwise.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.neither.null.nor.na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to check whether an object is neither NA nor NULL — is.neither.null.nor.na","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.null.na.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check whether an object is NA or NULL — is.null.na","title":"Function to check whether an object is NA or NULL — is.null.na","text":"Combines base::.na, base::.null","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.null.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check whether an object is NA or NULL — is.null.na","text":"","code":"is.null.na(x, negating = FALSE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.null.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check whether an object is NA or NULL — is.null.na","text":"x Object operate negating Whether return negation result","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.null.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check whether an object is NA or NULL — is.null.na","text":"Logical, depending negating: negating FALSE, returns TRUE x NA NULL; negating TRUE, returns TRUE x neither NA NULL.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/is.null.na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to check whether an object is NA or NULL — is.null.na","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/listing.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to list multiple objects passed as ... — listing","title":"Function to list multiple objects passed as ... — listing","text":"Function list multiple objects passed ...","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/listing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to list multiple objects passed as ... — listing","text":"","code":"listing(...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/listing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to list multiple objects passed as ... — listing","text":"... Objects operate naming Logical | Whether name list symbols provided objects. Defaults TRUE","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/listing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to list multiple objects passed as ... — listing","text":"(possibly named) list provided objects.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/listing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to list multiple objects passed as ... — listing","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract the symbols of the objects passed as ... — naming","title":"Function to extract the symbols of the objects passed as ... — naming","text":"function work called inside function objects explicitly passsed ....","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract the symbols of the objects passed as ... — naming","text":"","code":"naming(...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract the symbols of the objects passed as ... — naming","text":"... Objects operate","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract the symbols of the objects passed as ... — naming","text":"vector strings matching provided objects' symbols.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to extract the symbols of the objects passed as ... — naming","text":"https://stackoverflow.com//11892680","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/naming.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to extract the symbols of the objects passed as ... — naming","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/network_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for relational data extending the package network — network_financial","title":"An S4 class for relational data extending the package network — network_financial","text":"S4 class network objects produced FF.net FF.net.custom functions represent relations firms (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/network_financial.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for relational data extending the package network — network_financial","text":"data representation network network object","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create the default palette and ramp it up as needed — palette","title":"Function to create the default palette and ramp it up as needed — palette","text":"Function create default palette ramp needed","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create the default palette and ramp it up as needed — palette","text":"","code":"palette(length = 6)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create the default palette and ramp it up as needed — palette","text":"length Length desired palette","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create the default palette and ramp it up as needed — palette","text":"vector RGB codes containing length colours","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/palette.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create the default palette and ramp it up as needed — palette","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/plot_igraph-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph plotting for igraph_financial objects — plot_igraph-methods","title":"igraph plotting for igraph_financial objects — plot_igraph-methods","text":"Methods extend codeigraph's plotting functions igraph_financial objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/plot_igraph-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph plotting for igraph_financial objects — plot_igraph-methods","text":"","code":"# S4 method for igraph_financial plot_igraph(x, ...)  # S4 method for igraph plot_igraph(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/plot_igraph-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph plotting for igraph_financial objects — plot_igraph-methods","text":"x igraph_financial object ... parameters passed corresponding method /igraph functions (see Details).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/plot_igraph-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph plotting for igraph_financial objects — plot_igraph-methods","text":"igraph igraph_financial objects, returns NULL invisibly. called print graph R device. (see method igraph::plot.igraph)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/plot_igraph-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igraph plotting for igraph_financial objects — plot_igraph-methods","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-financial_matrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on a financial_matrix — print,financial_matrix-method","title":"Print information on a financial_matrix — print,financial_matrix-method","text":"Print method objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-financial_matrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on a financial_matrix — print,financial_matrix-method","text":"","code":"# S4 method for financial_matrix print(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-financial_matrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on a financial_matrix — print,financial_matrix-method","text":"x financial_matrix object print","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-financial_matrix-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information on a financial_matrix — print,financial_matrix-method","text":"return value, called print console information financial_matrix object: type relation detail (common ownership, board interlocks, ), Total capitalisation firms present (known), broke currency (one); Average total revenues (known), broke currency (one) print-matrix, number character given options('max.print').","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-financial_matrix-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information on a financial_matrix — print,financial_matrix-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-firm-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on a class firm object — print,firm-method","title":"Print information on a class firm object — print,firm-method","text":"Print method S4 class representing firm (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-firm-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on a class firm object — print,firm-method","text":"","code":"# S4 method for firm print(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-firm-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on a class firm object — print,firm-method","text":"x firm object show","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-firm-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information on a class firm object — print,firm-method","text":"return value, called print console detail information firm object including: first paragraph: legal form (), revenues (known), capitalisation (known). second paragraph, names board members/managers; third paragraph, data frame two columns: First, names owners , respective share firm's capital (normalised 1)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-firm-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information on a class firm object — print,firm-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on a igraph_financial object — print,igraph_financial-method","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"Method print objects class igraph_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"","code":"# S4 method for igraph_financial print(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"x object class igraph_financial shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"Nothing, called printing console following information: first line contains basic properties graph; rest print-contains graph's attributes. attribute names, kind attribute – graph (‘g’), vertex (‘v’) edge (‘e’) – denoted, type attribute well, character (‘c’), numeric (‘n’), logical (‘l’), (‘x’).","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"information see relevant igraph function: print.igraph","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-igraph_financial-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information on a igraph_financial object — print,igraph_financial-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-network_financial-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on a network_financial object — print,network_financial-method","title":"Print information on a network_financial object — print,network_financial-method","text":"Method print objects class network_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-network_financial-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on a network_financial object — print,network_financial-method","text":"","code":"# S4 method for network_financial print(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-network_financial-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on a network_financial object — print,network_financial-method","text":"x object class network_financial shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print-network_financial-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information on a network_financial object — print,network_financial-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print_financial_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on a financial_matrix — print_financial_matrix","title":"Print information on a financial_matrix — print_financial_matrix","text":"Un-exported function behind print methods objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print_financial_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on a financial_matrix — print_financial_matrix","text":"","code":"print_financial_matrix(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/print_financial_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on a financial_matrix — print_financial_matrix","text":"x object class financial_matrix shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/print_financial_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information on a financial_matrix — print_financial_matrix","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract information from a firm object (legal person) — query.firm","title":"Function to extract information from a firm object (legal person) — query.firm","text":"Function extract information firm object (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract information from a firm object (legal person) — query.firm","text":"","code":"query.firm(firm, which, naming = TRUE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract information from a firm object (legal person) — query.firm","text":"firm Firm extract information Information extract, minimum unambiguous substring. Possible values (one ): - name Name firm - id ID firm, usually ticker (provided otherwise known) - legal_form Legal form firm - sector Sector firm operates - revenues Yearly revenues - capitalisation Capitalisation - management Members board - ownership Owner(s) - shares Share owned () owner(s) - currency Currency revenues capitalisation denominated naming Whether name result querie information (defaults TRUE)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract information from a firm object (legal person) — query.firm","text":"Depends information queried. One (, length()>=2, list two ) following: name string representing name firm id string representing ID firm (usually ticker) legal_form string representing firm's legal form sector string indicating sector firm operates (possibly NACE rev. 2 code) revenues numeric (double) quantifying yearly revenues capitalisation numeric (double) quantifying capitalisation management vector strings representing members board ownership vector strings representing owner(s) shares numeric (double) vector indicating shares controlled () owner(s) currency string indicating currency revenues capitalisation denominated","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to extract information from a firm object (legal person) — query.firm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract information from a firm object (legal person) — query.firm","text":"","code":"# \\donttest{ # Query Apple's capitalisation data('firms_US') list2env(firms_US, parent.frame()) #> <environment: 0x56461f238fa0> query.firm(AAPL, which = 'capitalisation') #> Error in eval(expr, envir, enclos): object 'AAPL' not found  # Query British-American Tobacco's capitalisation using the common abbreviation 'cap' data('firms_US') list2env(firms_US, parent.frame()) #> <environment: 0x56461ef02690> query.firm(BTI, 'cap') #> Error in eval(expr, envir, enclos): object 'BTI' not found  # Query General Motors's owners and their shares, but return an unnamed \\code{\\link{list}} data('firms_US') list2env(firms_US, parent.frame()) #> <environment: 0x56461860ffa0> query.firm(GM, c('own', 'sha'), naming = FALSE) #> Error in eval(expr, envir, enclos): object 'GM' not found # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"function can fed either: - (possibly named) list objects class firm (see example 1); ","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"","code":"query.firms.dataframe(..., which, naming = TRUE, transposing = TRUE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"... Object/s extract information (see 'Details') Information extract, minimum unambiguous sub-string. Possible values (one ): - name Name firm - id ID firm, usually ticker (provided otherwise known) - legal_form Legal form firm - sector Sector firm operates - revenues Yearly revenues - capitalisation Capitalisation - management Members board - ownership Owner(s) - shares Share owned () owner(s) - currency Currency revenues capitalisation denominated naming Whether name result queried information (defaults TRUE) transposing TRUE (default) row correspond firm column variable.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"data frame structured follows (vice versa transposing == TRUE): row queried information; column number firm","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"recommended use function management, ownership, shares unless transposing == FALSE.","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract information from multiple firm object (legal person) as a data frame — query.firms.dataframe","text":"","code":"# \\donttest{ # Query Apple's, GM's, and BTI's market cap and revenues data('firms_US') query.firms.dataframe(firms_US, which = c('cap', 'rev')) #>      capitalisation    revenues #> AAPL   2.720908e+12 81510800000 #> GM     4.505379e+10 41867800000 #> BTI    7.274748e+10           0  # Query GM's and BTI's market cap and revenues data('firms_US') list2env(firms_US, envir = parent.frame()) #> <environment: 0x5646217146b8> query.firms.dataframe(GM, BTI, which = c('cap', 'rev')) #> Error in eval(expr, envir, enclos): object 'GM' not found # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract information from multiple firm object (legal person) — query.firms","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"function can fed either: - (possibly named) list objects class firm (see examples 1 2); - multiple objects class firm(see example 3)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"","code":"query.firms(..., which, naming = TRUE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"... Object/s extract information (see 'Details') Information extract, minimum unambiguous sub-string. Possible values (one ): - name Name firm - id ID firm, usually ticker (provided otherwise known) - legal_form Legal form firm - sector Sector firm operates - revenues Yearly revenues - capitalisation Capitalisation - management Members board - ownership Owner(s) - shares Share owned () owner(s) - currency Currency revenues capitalisation denominated naming Whether name result querie information (defaults TRUE)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"Depends information queried. object class list (, length()>=2, contain multiple sub-lists) following: name string representing name firm id string representing ID firm (usually ticker) legal_form string representing firm's legal form sector string indicating sector firm operates (possibly NACE rev. 2 code) revenues numeric (double) quantifying yearly revenues capitalisation numeric (double) quantifying capitalisation management vector strings representing members board ownership vector strings representing owner(s) shares numeric (double) vector indicating shares controlled () owner(s) currency string indicating currency revenues capitalisation denominated","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract information from multiple firm object (legal person) — query.firms","text":"","code":"# \\donttest{ # Query Apple's, GM's, and BTI's market cap and revenues data('firms_US') query.firms(firms_US, which = c('cap', 'rev')) #> $AAPL #> $AAPL$capitalisation #> [1] 2.720908e+12 #>  #> $AAPL$revenues #> [1] 81510800000 #>  #>  #> $GM #> $GM$capitalisation #> [1] 45053788160 #>  #> $GM$revenues #> [1] 41867800000 #>  #>  #> $BTI #> $BTI$capitalisation #> [1] 72747483136 #>  #> $BTI$revenues #> [1] 0 #>  #>   # Query GM's and BTI's management data('firms_US') query.firms(firms_US, which = 'man') #> $AAPL #>            management                  <NA>                  <NA>  #>     \"Timothy D. Cook\"       \"Luca  Maestri\" \"Jeffrey E. Williams\"  #>                  <NA>                  <NA>                  <NA>  #>  \"Katherine L. Adams\"    \"Deirdre  O'Brien\"        \"Chris  Kondo\"  #>                  <NA>                  <NA>                  <NA>  #>       \"James  Wilson\"         \"Mary  Demby\"       \"Nancy  Paxton\"  #>                  <NA>  #>       \"Greg  Joswiak\"  #>  #> $GM #>             management                   <NA>                   <NA>  #>        \"Mary T. Barra\"        \"Mark L. Reuss\"     \"Paul A. Jacobson\"  #>                   <NA>                   <NA>                   <NA>  #>  \"Stephen K. Carlisle\"     \"Douglas L. Parks\"   \"Wayne Gilbert West\"  #>                   <NA>                   <NA>                   <NA>  #> \"Christopher T. Hatto\"     \"Kent E. Helfrich\"        \"Fred  Killeen\"  #>                   <NA>  #> \"Ashish  Kohli C.F.A.\"  #>  #> $BTI #>            management                  <NA>                  <NA>  #>  \"Tadeu Luiz Marroco\"    \"Syed Javed Iqbal\"   \"Kingsley  Wheaton\"  #>                  <NA>                  <NA>                  <NA>  #> \"Johan  Vandermeulen\"   \"Jerome B. Abelman\"      \"Luciano  Comin\"  #>                  <NA>                  <NA>                  <NA>  #>       \"Paul  Lageweg\"        \"Guy  Meldrum\"          \"Hae In Kim\"  #>                  <NA>  #>  \"Mihovil  Dijanosic\"  #>   # Query Appple's and GM's revenues and currency data('firms_US') list2env(firms_US, envir = parent.frame()) #> <environment: 0x56461fc73820> query.firms(AAPL, GM, which = c('rev', 'curr')) #> Error in eval(expr, envir, enclos): object 'AAPL' not found # }"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms_switch.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","title":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","text":"Function chose right algorithm querying one information multiple firm objects","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms_switch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","text":"","code":"query.firms_switch(firm, which, naming = TRUE, unlisting = FALSE)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms_switch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","text":"firm List objects operate naming Logical | Whether name result names(firms). Defaults TRUE unlisting Logical | Whether un-list result. Defaults FALSE","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms_switch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","text":"queried information.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/query.firms_switch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to chose the right algorithm when querying one or more information over multiple firm objects — query.firms_switch","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a firm (legal person) — register.firm","title":"Function to create a firm (legal person) — register.firm","text":"Function create firm (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a firm (legal person) — register.firm","text":"","code":"register.firm(   name,   id = NA,   legal_form = NA,   sector = NA,   sector_classif = NULL,   revenues = NA,   capitalisation = NA,   management = NA,   ownership = NA,   shares = NA,   currency = NA )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a firm (legal person) — register.firm","text":"name Name firm id Provide ID code firm. Defaults NA legal_form Legal form firm (e.g., LLP, Inc, GmbH, Private, etc.) sector Sector firm operates (values depend value sector_classif) sector_classif standard sector classification () used. Possible values - NACE Statistical Classification Economic Activities European Community 'Nomenclature statistique des Activités économiques dans la Communauté Européenne', revision 2; - NA custom classification (default anything provided); - NULL classification (default nothing provided). revenues Yearly revenues capitalisation Firm's capitalisation management Names members board ownership Names owner(s) shares Share owned () owner(s) currency Currency capitalisation revenues expressed (defaults `USD`)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a firm (legal person) — register.firm","text":"object S4 class firm containing several fields, first one mandatory: name Name firm id ID firm, usually ticker legal_form Legal form firm sector Sector firm operates revenues Yearly revenues capitalisation Capitalisation management Members board ownership Owner(s) shares Share owned () owner(s) currency Currency","code":""},{"path":[]},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create a firm (legal person) — register.firm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/register.firm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a firm (legal person) — register.firm","text":"","code":"# Registering Apple manually AAPL <- register.firm(name = 'Apple', id = 'AAPL', legal_form = 'GmbH',                       revenues = 81665400000, capitalisation = 2755039000000,                       management = my_vector <- c(\"Timothy D. Cook\",                                                   \"Luca Maestri\",                                                   \"Jeffrey E. Williams\",                                                   \"Katherine L. Adams\",                                                   \"Deirdre O'Brien\",                                                   \"Chris Kondo\",                                                   \"James Wilson\",                                                   \"Mary Demby\",                                                   \"Nancy Paxton\",                                                   \"Greg Joswiak\"),                       ownership = c('Vanguard Total Stock Market Index Fund',                       'Vanguard 500 Index Fund',                       'Fidelity 500 Index Fund',                       'SPDR S&P 500 ETF Trust',                       'iShares Core S&P 500 ETF',                       'Invesco ETF Tr-Invesco QQQ Tr, Series 1 ETF',                       'Vanguard Growth Index Fund',                       'Vanguard Institutional Index Fund-Institutional Index Fund',                       'Vanguard Information Technology Index Fund',                       'Select Sector SPDR Fund-Technology'),                       shares = c(0.0290, 0.0218, 0.0104, 0.0102, 0.0084,                                  0.0082, 0.0081, 0.0066, 0.0043, 0.0039),                       currency = 'USD')  # Registering a coal-mining company indicating the sector using `NACE` codes, without ID set.seed(123456789) firm_coalmining <- register.firm(   name = 'A coal-mining firm',   legal_form = 'Private',   sector = 'B.05',   sector_classif = 'NACE' )  # Getting creative: Register a firm with coded owners and managers set.seed(123456789) firm_coded <- register.firm(   name = 'Coded firm',   revenues = sample(seq(1:100)/10, 1)*10^sample(1:5, 1),   capitalisation = sample(seq(1:100)/10, 1)*10^sample(2:7, 1),   management = c('Board Member', 'CEO', 'CTO', 'Activist investor'),   ownership = c('State', 'Foreign investors'),   shares = c(51, 49),   currency = 'EUR' )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to rescale numeric vectors — rescale.numeric","title":"Function to rescale numeric vectors — rescale.numeric","text":"Rescale continuous vector specified minimum maximum","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to rescale numeric vectors — rescale.numeric","text":"","code":"rescale.numeric(   x,   to = c(0, 1),   from = range(x, na.rm = TRUE, finite = TRUE),   ... )"},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to rescale numeric vectors — rescale.numeric","text":"x vector re-scale output range (numeric vector length two) input range (vector length two).  given, calculated range x","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to rescale numeric vectors — rescale.numeric","text":"Re-scaled vector","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to rescale numeric vectors — rescale.numeric","text":": package scales","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/rescale.numeric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to rescale numeric vectors — rescale.numeric","text":"Hadley Wickham","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-financial_matrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a financial_matrix — show,financial_matrix-method","title":"Show information on a financial_matrix — show,financial_matrix-method","text":"Show method objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-financial_matrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a financial_matrix — show,financial_matrix-method","text":"","code":"# S4 method for financial_matrix show(object)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-financial_matrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a financial_matrix — show,financial_matrix-method","text":"object financial_matrix object show","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-financial_matrix-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show information on a financial_matrix — show,financial_matrix-method","text":"return value, called print console information financial_matrix object: type relation detail (common ownership, board interlocks, ), Total capitalisation firms present (known), broke currency (one); Average total revenues (known), broke currency (one) print-matrix, six columns six rows (.e., 36 cells). additional row text printed inform truncation matrix displayed","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-financial_matrix-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a financial_matrix — show,financial_matrix-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-firm-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a firm — show,firm-method","title":"Show information on a firm — show,firm-method","text":"Show method S4 class firm representing firm (legal person)","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-firm-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a firm — show,firm-method","text":"","code":"# S4 method for firm show(object)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-firm-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a firm — show,firm-method","text":"object firm object show","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-firm-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show information on a firm — show,firm-method","text":"return value, called print console information firm object including: legal form (), revenues (known), capitalisation (known), number members board/managers; number owners/shareholders.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-firm-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a firm — show,firm-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-igraph_financial-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a igraph_financial — show,igraph_financial-method","title":"Show information on a igraph_financial — show,igraph_financial-method","text":"Show method objects class igraph_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-igraph_financial-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a igraph_financial — show,igraph_financial-method","text":"","code":"# S4 method for igraph_financial show(object)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-igraph_financial-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a igraph_financial — show,igraph_financial-method","text":"object igraph_financial object show","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-igraph_financial-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show information on a igraph_financial — show,igraph_financial-method","text":"Nothing, called printing console following information: first line contains basic properties graph; rest first paragrah contains graph's attributes. attribute names, kind attribute – graph (‘g’), vertex (‘v’) edge (‘e’) – denoted, type attribute well, character (‘c’), numeric (‘n’), logical (‘l’), (‘x’); second paragraph decribes type relation represented network (common ownership, board interlocks, ); third paragraph informs whether size vertexes represents attribute (, yes, one); fourth paragraph informs whether colour vertexes represents attribute (, yes, one); fifth paragraph informs whether width edges represents strength; sixth paragraph informs whether colour edges represents strength.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-igraph_financial-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a igraph_financial — show,igraph_financial-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-network_financial-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a network_financial — show,network_financial-method","title":"Show information on a network_financial — show,network_financial-method","text":"Show method objects class network_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-network_financial-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a network_financial — show,network_financial-method","text":"","code":"# S4 method for network_financial show(object)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-network_financial-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a network_financial — show,network_financial-method","text":"object network_financial object show","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show-network_financial-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a network_financial — show,network_financial-method","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_firm.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a class firm object — show_firm","title":"Show information on a class firm object — show_firm","text":"Unexported function behind show methods objects class firm","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_firm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a class firm object — show_firm","text":"","code":"show_firm(object)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_firm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a class firm object — show_firm","text":"object object class firm shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_firm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show information on a class firm object — show_firm","text":"return value, called print console information firm object including: legal form (), revenues (known), capitalisation (known), number members board/managers; number owners/shareholders.","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_firm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a class firm object — show_firm","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_igraph_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a igraph_financial — show_igraph_financial","title":"Show information on a igraph_financial — show_igraph_financial","text":"Un-exported function behind show method objects class igraph_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_igraph_financial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a igraph_financial — show_igraph_financial","text":"","code":"show_igraph_financial(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_igraph_financial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a igraph_financial — show_igraph_financial","text":"x object class igraph_financial shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_igraph_financial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a igraph_financial — show_igraph_financial","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_network_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"Show information on a network_financial — show_network_financial","title":"Show information on a network_financial — show_network_financial","text":"Un-exported function behind show method objects class network_financial","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_network_financial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show information on a network_financial — show_network_financial","text":"","code":"show_network_financial(x)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_network_financial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show information on a network_financial — show_network_financial","text":"x object class network_financial shown","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/show_network_financial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show information on a network_financial — show_network_financial","text":"Telarico, Fabio Ashtar","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/subset_financial_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a financial_matrix object — subset_financial_matrix","title":"Subset a financial_matrix object — subset_financial_matrix","text":"Un-exported function behind subset method objects class financial_matrix","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/subset_financial_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a financial_matrix object — subset_financial_matrix","text":"","code":"subset_financial_matrix(x, ...)"},{"path":"https://fatelarico.github.io/FinNet.html/reference/subset_financial_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a financial_matrix object — subset_financial_matrix","text":"x object class financial_matrix subset ... Additional arguments matrix method subset() (see 'See also')","code":""},{"path":"https://fatelarico.github.io/FinNet.html/reference/subset_financial_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset a financial_matrix object — subset_financial_matrix","text":"Telarico, Fabio Ashtar","code":""}]
